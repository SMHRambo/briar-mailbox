/*
 *     Briar Mailbox
 *     Copyright (C) 2021-2022  The Briar Project
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as
 *     published by the Free Software Foundation, either version 3 of the
 *     License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

package org.briarproject.mailbox.android.ui

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.fragment.app.activityViewModels
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collect
import org.briarproject.mailbox.R
import org.briarproject.mailbox.android.StatusManager
import org.briarproject.mailbox.android.UiUtils.formatDate

@AndroidEntryPoint
class StatusFragment : Fragment() {

    private val viewModel: MailboxViewModel by activityViewModels()

    private lateinit var illustration: ImageView
    private lateinit var headline: TextView
    private lateinit var buttonStop: Button
    private lateinit var buttonUnlink: Button
    private lateinit var textViewDescription: TextView

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?,
    ): View? {
        return inflater.inflate(R.layout.fragment_status, container, false)
    }

    override fun onViewCreated(v: View, savedInstanceState: Bundle?) {
        illustration = v.findViewById(R.id.illustration)
        headline = v.findViewById(R.id.headline)
        buttonStop = v.findViewById(R.id.buttonStop)
        buttonUnlink = v.findViewById(R.id.buttonUnlink)
        textViewDescription = v.findViewById(R.id.description)

        buttonStop.setOnClickListener {
            viewModel.stopLifecycle()
        }
        buttonUnlink.setOnClickListener {
            MaterialAlertDialogBuilder(
                requireContext(), R.style.Theme_BriarMailbox_Dialog_Destructive
            ).setTitle(
                R.string.unlink_title
            ).setMessage(R.string.unlink_description)
                .setPositiveButton(R.string.unlink) { _, _ -> viewModel.wipe() }
                .setNegativeButton(R.string.cancel, null)
                .create().show()
        }

        viewModel.lastAccess.observe(viewLifecycleOwner) { onLastAccessChanged(it) }
        launchAndRepeatWhileStarted {
            viewModel.setupState.collect { onSetupStateChanged(it) }
        }
    }

    private fun onLastAccessChanged(lastAccess: Long) {
        textViewDescription.text =
            getString(R.string.last_connection, formatDate(requireContext(), lastAccess))
    }

    private fun onSetupStateChanged(state: StatusManager.MailboxStartupProgress) {
        if (state is StatusManager.ErrorNoNetwork) {
            illustration.setImageResource(R.drawable.ic_error)
            headline.setText(R.string.status_offline)
            textViewDescription.setText(R.string.status_offline_description)
        } else {
            illustration.setImageResource(R.drawable.ic_success)
            headline.setText(R.string.status_running)
            onLastAccessChanged(viewModel.lastAccess.value ?: 0)
        }
    }

}
